// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IEmailService is an autogenerated mock type for the IEmailService type
type IEmailService struct {
	mock.Mock
}

type IEmailService_Expecter struct {
	mock *mock.Mock
}

func (_m *IEmailService) EXPECT() *IEmailService_Expecter {
	return &IEmailService_Expecter{mock: &_m.Mock}
}

// SendRegisterEmail provides a mock function with given fields: to, token
func (_m *IEmailService) SendRegisterEmail(to string, token string) error {
	ret := _m.Called(to, token)

	if len(ret) == 0 {
		panic("no return value specified for SendRegisterEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(to, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IEmailService_SendRegisterEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRegisterEmail'
type IEmailService_SendRegisterEmail_Call struct {
	*mock.Call
}

// SendRegisterEmail is a helper method to define mock.On call
//   - to string
//   - token string
func (_e *IEmailService_Expecter) SendRegisterEmail(to interface{}, token interface{}) *IEmailService_SendRegisterEmail_Call {
	return &IEmailService_SendRegisterEmail_Call{Call: _e.mock.On("SendRegisterEmail", to, token)}
}

func (_c *IEmailService_SendRegisterEmail_Call) Run(run func(to string, token string)) *IEmailService_SendRegisterEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IEmailService_SendRegisterEmail_Call) Return(_a0 error) *IEmailService_SendRegisterEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IEmailService_SendRegisterEmail_Call) RunAndReturn(run func(string, string) error) *IEmailService_SendRegisterEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendResetPasswordEmail provides a mock function with given fields: to, token
func (_m *IEmailService) SendResetPasswordEmail(to string, token string) error {
	ret := _m.Called(to, token)

	if len(ret) == 0 {
		panic("no return value specified for SendResetPasswordEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(to, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IEmailService_SendResetPasswordEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendResetPasswordEmail'
type IEmailService_SendResetPasswordEmail_Call struct {
	*mock.Call
}

// SendResetPasswordEmail is a helper method to define mock.On call
//   - to string
//   - token string
func (_e *IEmailService_Expecter) SendResetPasswordEmail(to interface{}, token interface{}) *IEmailService_SendResetPasswordEmail_Call {
	return &IEmailService_SendResetPasswordEmail_Call{Call: _e.mock.On("SendResetPasswordEmail", to, token)}
}

func (_c *IEmailService_SendResetPasswordEmail_Call) Run(run func(to string, token string)) *IEmailService_SendResetPasswordEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IEmailService_SendResetPasswordEmail_Call) Return(_a0 error) *IEmailService_SendResetPasswordEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IEmailService_SendResetPasswordEmail_Call) RunAndReturn(run func(string, string) error) *IEmailService_SendResetPasswordEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewIEmailService creates a new instance of IEmailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIEmailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IEmailService {
	mock := &IEmailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

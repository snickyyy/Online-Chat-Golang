// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	dto "libs/src/internal/dto"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IBaseRedisRepository is an autogenerated mock type for the IBaseRedisRepository type
type IBaseRedisRepository struct {
	mock.Mock
}

type IBaseRedisRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IBaseRedisRepository) EXPECT() *IBaseRedisRepository_Expecter {
	return &IBaseRedisRepository_Expecter{mock: &_m.Mock}
}

// CountAll provides a mock function with no fields
func (_m *IBaseRedisRepository) CountAll() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountAll")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBaseRedisRepository_CountAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAll'
type IBaseRedisRepository_CountAll_Call struct {
	*mock.Call
}

// CountAll is a helper method to define mock.On call
func (_e *IBaseRedisRepository_Expecter) CountAll() *IBaseRedisRepository_CountAll_Call {
	return &IBaseRedisRepository_CountAll_Call{Call: _e.mock.On("CountAll")}
}

func (_c *IBaseRedisRepository_CountAll_Call) Run(run func()) *IBaseRedisRepository_CountAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IBaseRedisRepository_CountAll_Call) Return(_a0 int64, _a1 error) *IBaseRedisRepository_CountAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBaseRedisRepository_CountAll_Call) RunAndReturn(run func() (int64, error)) *IBaseRedisRepository_CountAll_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: prefix, key, value, expiration
func (_m *IBaseRedisRepository) Create(prefix string, key string, value interface{}, expiration time.Duration) (string, error) {
	ret := _m.Called(prefix, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}, time.Duration) (string, error)); ok {
		return rf(prefix, key, value, expiration)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}, time.Duration) string); ok {
		r0 = rf(prefix, key, value, expiration)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}, time.Duration) error); ok {
		r1 = rf(prefix, key, value, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBaseRedisRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IBaseRedisRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - prefix string
//   - key string
//   - value interface{}
//   - expiration time.Duration
func (_e *IBaseRedisRepository_Expecter) Create(prefix interface{}, key interface{}, value interface{}, expiration interface{}) *IBaseRedisRepository_Create_Call {
	return &IBaseRedisRepository_Create_Call{Call: _e.mock.On("Create", prefix, key, value, expiration)}
}

func (_c *IBaseRedisRepository_Create_Call) Run(run func(prefix string, key string, value interface{}, expiration time.Duration)) *IBaseRedisRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *IBaseRedisRepository_Create_Call) Return(_a0 string, _a1 error) *IBaseRedisRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBaseRedisRepository_Create_Call) RunAndReturn(run func(string, string, interface{}, time.Duration) (string, error)) *IBaseRedisRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: prefix, key
func (_m *IBaseRedisRepository) Delete(prefix string, key string) (int64, error) {
	ret := _m.Called(prefix, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (int64, error)); ok {
		return rf(prefix, key)
	}
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(prefix, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(prefix, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBaseRedisRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IBaseRedisRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - prefix string
//   - key string
func (_e *IBaseRedisRepository_Expecter) Delete(prefix interface{}, key interface{}) *IBaseRedisRepository_Delete_Call {
	return &IBaseRedisRepository_Delete_Call{Call: _e.mock.On("Delete", prefix, key)}
}

func (_c *IBaseRedisRepository_Delete_Call) Run(run func(prefix string, key string)) *IBaseRedisRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IBaseRedisRepository_Delete_Call) Return(_a0 int64, _a1 error) *IBaseRedisRepository_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBaseRedisRepository_Delete_Call) RunAndReturn(run func(string, string) (int64, error)) *IBaseRedisRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByKey provides a mock function with given fields: prefix, key
func (_m *IBaseRedisRepository) GetByKey(prefix string, key string) (string, error) {
	ret := _m.Called(prefix, key)

	if len(ret) == 0 {
		panic("no return value specified for GetByKey")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(prefix, key)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(prefix, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(prefix, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBaseRedisRepository_GetByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByKey'
type IBaseRedisRepository_GetByKey_Call struct {
	*mock.Call
}

// GetByKey is a helper method to define mock.On call
//   - prefix string
//   - key string
func (_e *IBaseRedisRepository_Expecter) GetByKey(prefix interface{}, key interface{}) *IBaseRedisRepository_GetByKey_Call {
	return &IBaseRedisRepository_GetByKey_Call{Call: _e.mock.On("GetByKey", prefix, key)}
}

func (_c *IBaseRedisRepository_GetByKey_Call) Run(run func(prefix string, key string)) *IBaseRedisRepository_GetByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IBaseRedisRepository_GetByKey_Call) Return(_a0 string, _a1 error) *IBaseRedisRepository_GetByKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBaseRedisRepository_GetByKey_Call) RunAndReturn(run func(string, string) (string, error)) *IBaseRedisRepository_GetByKey_Call {
	_c.Call.Return(run)
	return _c
}

// IsExist provides a mock function with given fields: prefix, key
func (_m *IBaseRedisRepository) IsExist(prefix string, key string) (bool, error) {
	ret := _m.Called(prefix, key)

	if len(ret) == 0 {
		panic("no return value specified for IsExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(prefix, key)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(prefix, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(prefix, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBaseRedisRepository_IsExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExist'
type IBaseRedisRepository_IsExist_Call struct {
	*mock.Call
}

// IsExist is a helper method to define mock.On call
//   - prefix string
//   - key string
func (_e *IBaseRedisRepository_Expecter) IsExist(prefix interface{}, key interface{}) *IBaseRedisRepository_IsExist_Call {
	return &IBaseRedisRepository_IsExist_Call{Call: _e.mock.On("IsExist", prefix, key)}
}

func (_c *IBaseRedisRepository_IsExist_Call) Run(run func(prefix string, key string)) *IBaseRedisRepository_IsExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IBaseRedisRepository_IsExist_Call) Return(_a0 bool, _a1 error) *IBaseRedisRepository_IsExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBaseRedisRepository_IsExist_Call) RunAndReturn(run func(string, string) (bool, error)) *IBaseRedisRepository_IsExist_Call {
	_c.Call.Return(run)
	return _c
}

// SetDTO provides a mock function with given fields: prefix, obj
func (_m *IBaseRedisRepository) SetDTO(prefix string, obj dto.SessionDTO) (string, error) {
	ret := _m.Called(prefix, obj)

	if len(ret) == 0 {
		panic("no return value specified for SetDTO")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, dto.SessionDTO) (string, error)); ok {
		return rf(prefix, obj)
	}
	if rf, ok := ret.Get(0).(func(string, dto.SessionDTO) string); ok {
		r0 = rf(prefix, obj)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, dto.SessionDTO) error); ok {
		r1 = rf(prefix, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBaseRedisRepository_SetDTO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDTO'
type IBaseRedisRepository_SetDTO_Call struct {
	*mock.Call
}

// SetDTO is a helper method to define mock.On call
//   - prefix string
//   - obj dto.SessionDTO
func (_e *IBaseRedisRepository_Expecter) SetDTO(prefix interface{}, obj interface{}) *IBaseRedisRepository_SetDTO_Call {
	return &IBaseRedisRepository_SetDTO_Call{Call: _e.mock.On("SetDTO", prefix, obj)}
}

func (_c *IBaseRedisRepository_SetDTO_Call) Run(run func(prefix string, obj dto.SessionDTO)) *IBaseRedisRepository_SetDTO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(dto.SessionDTO))
	})
	return _c
}

func (_c *IBaseRedisRepository_SetDTO_Call) Return(_a0 string, _a1 error) *IBaseRedisRepository_SetDTO_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBaseRedisRepository_SetDTO_Call) RunAndReturn(run func(string, dto.SessionDTO) (string, error)) *IBaseRedisRepository_SetDTO_Call {
	_c.Call.Return(run)
	return _c
}

// NewIBaseRedisRepository creates a new instance of IBaseRedisRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBaseRedisRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBaseRedisRepository {
	mock := &IBaseRedisRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

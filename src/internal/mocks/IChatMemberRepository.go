// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "libs/src/internal/domain/models"
	dto "libs/src/internal/dto"

	mock "github.com/stretchr/testify/mock"
)

// IChatMemberRepository is an autogenerated mock type for the IChatMemberRepository type
type IChatMemberRepository struct {
	mock.Mock
}

type IChatMemberRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IChatMemberRepository) EXPECT() *IChatMemberRepository_Expecter {
	return &IChatMemberRepository_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: Ctx, filter, args
func (_m *IChatMemberRepository) Count(Ctx context.Context, filter string, args ...interface{}) (int64, error) {
	var _ca []interface{}
	_ca = append(_ca, Ctx, filter)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (int64, error)); ok {
		return rf(Ctx, filter, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) int64); ok {
		r0 = rf(Ctx, filter, args...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(Ctx, filter, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IChatMemberRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type IChatMemberRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - Ctx context.Context
//   - filter string
//   - args ...interface{}
func (_e *IChatMemberRepository_Expecter) Count(Ctx interface{}, filter interface{}, args ...interface{}) *IChatMemberRepository_Count_Call {
	return &IChatMemberRepository_Count_Call{Call: _e.mock.On("Count",
		append([]interface{}{Ctx, filter}, args...)...)}
}

func (_c *IChatMemberRepository_Count_Call) Run(run func(Ctx context.Context, filter string, args ...interface{})) *IChatMemberRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *IChatMemberRepository_Count_Call) Return(_a0 int64, _a1 error) *IChatMemberRepository_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IChatMemberRepository_Count_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (int64, error)) *IChatMemberRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: Ctx, obj
func (_m *IChatMemberRepository) Create(Ctx context.Context, obj *domain.ChatMember) error {
	ret := _m.Called(Ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ChatMember) error); ok {
		r0 = rf(Ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IChatMemberRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IChatMemberRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - Ctx context.Context
//   - obj *domain.ChatMember
func (_e *IChatMemberRepository_Expecter) Create(Ctx interface{}, obj interface{}) *IChatMemberRepository_Create_Call {
	return &IChatMemberRepository_Create_Call{Call: _e.mock.On("Create", Ctx, obj)}
}

func (_c *IChatMemberRepository_Create_Call) Run(run func(Ctx context.Context, obj *domain.ChatMember)) *IChatMemberRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ChatMember))
	})
	return _c
}

func (_c *IChatMemberRepository_Create_Call) Return(_a0 error) *IChatMemberRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IChatMemberRepository_Create_Call) RunAndReturn(run func(context.Context, *domain.ChatMember) error) *IChatMemberRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: Ctx, id
func (_m *IChatMemberRepository) DeleteById(Ctx context.Context, id int64) error {
	ret := _m.Called(Ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(Ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IChatMemberRepository_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type IChatMemberRepository_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - Ctx context.Context
//   - id int64
func (_e *IChatMemberRepository_Expecter) DeleteById(Ctx interface{}, id interface{}) *IChatMemberRepository_DeleteById_Call {
	return &IChatMemberRepository_DeleteById_Call{Call: _e.mock.On("DeleteById", Ctx, id)}
}

func (_c *IChatMemberRepository_DeleteById_Call) Run(run func(Ctx context.Context, id int64)) *IChatMemberRepository_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IChatMemberRepository_DeleteById_Call) Return(_a0 error) *IChatMemberRepository_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IChatMemberRepository_DeleteById_Call) RunAndReturn(run func(context.Context, int64) error) *IChatMemberRepository_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMember provides a mock function with given fields: Ctx, memberId, chatId
func (_m *IChatMemberRepository) DeleteMember(Ctx context.Context, memberId int64, chatId int64) error {
	ret := _m.Called(Ctx, memberId, chatId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(Ctx, memberId, chatId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IChatMemberRepository_DeleteMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMember'
type IChatMemberRepository_DeleteMember_Call struct {
	*mock.Call
}

// DeleteMember is a helper method to define mock.On call
//   - Ctx context.Context
//   - memberId int64
//   - chatId int64
func (_e *IChatMemberRepository_Expecter) DeleteMember(Ctx interface{}, memberId interface{}, chatId interface{}) *IChatMemberRepository_DeleteMember_Call {
	return &IChatMemberRepository_DeleteMember_Call{Call: _e.mock.On("DeleteMember", Ctx, memberId, chatId)}
}

func (_c *IChatMemberRepository_DeleteMember_Call) Run(run func(Ctx context.Context, memberId int64, chatId int64)) *IChatMemberRepository_DeleteMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *IChatMemberRepository_DeleteMember_Call) Return(_a0 error) *IChatMemberRepository_DeleteMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IChatMemberRepository_DeleteMember_Call) RunAndReturn(run func(context.Context, int64, int64) error) *IChatMemberRepository_DeleteMember_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteQuery provides a mock function with given fields: Ctx, query, args
func (_m *IChatMemberRepository) ExecuteQuery(Ctx context.Context, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, Ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteQuery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) error); ok {
		r0 = rf(Ctx, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IChatMemberRepository_ExecuteQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteQuery'
type IChatMemberRepository_ExecuteQuery_Call struct {
	*mock.Call
}

// ExecuteQuery is a helper method to define mock.On call
//   - Ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *IChatMemberRepository_Expecter) ExecuteQuery(Ctx interface{}, query interface{}, args ...interface{}) *IChatMemberRepository_ExecuteQuery_Call {
	return &IChatMemberRepository_ExecuteQuery_Call{Call: _e.mock.On("ExecuteQuery",
		append([]interface{}{Ctx, query}, args...)...)}
}

func (_c *IChatMemberRepository_ExecuteQuery_Call) Run(run func(Ctx context.Context, query string, args ...interface{})) *IChatMemberRepository_ExecuteQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *IChatMemberRepository_ExecuteQuery_Call) Return(_a0 error) *IChatMemberRepository_ExecuteQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IChatMemberRepository_ExecuteQuery_Call) RunAndReturn(run func(context.Context, string, ...interface{}) error) *IChatMemberRepository_ExecuteQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Filter provides a mock function with given fields: Ctx, query, args
func (_m *IChatMemberRepository) Filter(Ctx context.Context, query string, args ...interface{}) ([]domain.ChatMember, error) {
	var _ca []interface{}
	_ca = append(_ca, Ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Filter")
	}

	var r0 []domain.ChatMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) ([]domain.ChatMember, error)); ok {
		return rf(Ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) []domain.ChatMember); ok {
		r0 = rf(Ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ChatMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(Ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IChatMemberRepository_Filter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Filter'
type IChatMemberRepository_Filter_Call struct {
	*mock.Call
}

// Filter is a helper method to define mock.On call
//   - Ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *IChatMemberRepository_Expecter) Filter(Ctx interface{}, query interface{}, args ...interface{}) *IChatMemberRepository_Filter_Call {
	return &IChatMemberRepository_Filter_Call{Call: _e.mock.On("Filter",
		append([]interface{}{Ctx, query}, args...)...)}
}

func (_c *IChatMemberRepository_Filter_Call) Run(run func(Ctx context.Context, query string, args ...interface{})) *IChatMemberRepository_Filter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *IChatMemberRepository_Filter_Call) Return(_a0 []domain.ChatMember, _a1 error) *IChatMemberRepository_Filter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IChatMemberRepository_Filter_Call) RunAndReturn(run func(context.Context, string, ...interface{}) ([]domain.ChatMember, error)) *IChatMemberRepository_Filter_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: Ctx
func (_m *IChatMemberRepository) GetAll(Ctx context.Context) ([]domain.ChatMember, error) {
	ret := _m.Called(Ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.ChatMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.ChatMember, error)); ok {
		return rf(Ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.ChatMember); ok {
		r0 = rf(Ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ChatMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(Ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IChatMemberRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type IChatMemberRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - Ctx context.Context
func (_e *IChatMemberRepository_Expecter) GetAll(Ctx interface{}) *IChatMemberRepository_GetAll_Call {
	return &IChatMemberRepository_GetAll_Call{Call: _e.mock.On("GetAll", Ctx)}
}

func (_c *IChatMemberRepository_GetAll_Call) Run(run func(Ctx context.Context)) *IChatMemberRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IChatMemberRepository_GetAll_Call) Return(_a0 []domain.ChatMember, _a1 error) *IChatMemberRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IChatMemberRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]domain.ChatMember, error)) *IChatMemberRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: Ctx, id
func (_m *IChatMemberRepository) GetById(Ctx context.Context, id int64) (domain.ChatMember, error) {
	ret := _m.Called(Ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 domain.ChatMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.ChatMember, error)); ok {
		return rf(Ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.ChatMember); ok {
		r0 = rf(Ctx, id)
	} else {
		r0 = ret.Get(0).(domain.ChatMember)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(Ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IChatMemberRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type IChatMemberRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - Ctx context.Context
//   - id int64
func (_e *IChatMemberRepository_Expecter) GetById(Ctx interface{}, id interface{}) *IChatMemberRepository_GetById_Call {
	return &IChatMemberRepository_GetById_Call{Call: _e.mock.On("GetById", Ctx, id)}
}

func (_c *IChatMemberRepository_GetById_Call) Run(run func(Ctx context.Context, id int64)) *IChatMemberRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IChatMemberRepository_GetById_Call) Return(_a0 domain.ChatMember, _a1 error) *IChatMemberRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IChatMemberRepository_GetById_Call) RunAndReturn(run func(context.Context, int64) (domain.ChatMember, error)) *IChatMemberRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetMemberInfo provides a mock function with given fields: Ctx, memberId, chatId
func (_m *IChatMemberRepository) GetMemberInfo(Ctx context.Context, memberId int64, chatId int64) (dto.MemberInfo, error) {
	ret := _m.Called(Ctx, memberId, chatId)

	if len(ret) == 0 {
		panic("no return value specified for GetMemberInfo")
	}

	var r0 dto.MemberInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (dto.MemberInfo, error)); ok {
		return rf(Ctx, memberId, chatId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) dto.MemberInfo); ok {
		r0 = rf(Ctx, memberId, chatId)
	} else {
		r0 = ret.Get(0).(dto.MemberInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(Ctx, memberId, chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IChatMemberRepository_GetMemberInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMemberInfo'
type IChatMemberRepository_GetMemberInfo_Call struct {
	*mock.Call
}

// GetMemberInfo is a helper method to define mock.On call
//   - Ctx context.Context
//   - memberId int64
//   - chatId int64
func (_e *IChatMemberRepository_Expecter) GetMemberInfo(Ctx interface{}, memberId interface{}, chatId interface{}) *IChatMemberRepository_GetMemberInfo_Call {
	return &IChatMemberRepository_GetMemberInfo_Call{Call: _e.mock.On("GetMemberInfo", Ctx, memberId, chatId)}
}

func (_c *IChatMemberRepository_GetMemberInfo_Call) Run(run func(Ctx context.Context, memberId int64, chatId int64)) *IChatMemberRepository_GetMemberInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *IChatMemberRepository_GetMemberInfo_Call) Return(_a0 dto.MemberInfo, _a1 error) *IChatMemberRepository_GetMemberInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IChatMemberRepository_GetMemberInfo_Call) RunAndReturn(run func(context.Context, int64, int64) (dto.MemberInfo, error)) *IChatMemberRepository_GetMemberInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetMembersPreview provides a mock function with given fields: Ctx, chatId, limit, offset, searchUsername
func (_m *IChatMemberRepository) GetMembersPreview(Ctx context.Context, chatId int64, limit int, offset int, searchUsername string) ([]dto.MemberPreview, error) {
	ret := _m.Called(Ctx, chatId, limit, offset, searchUsername)

	if len(ret) == 0 {
		panic("no return value specified for GetMembersPreview")
	}

	var r0 []dto.MemberPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int, string) ([]dto.MemberPreview, error)); ok {
		return rf(Ctx, chatId, limit, offset, searchUsername)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int, string) []dto.MemberPreview); ok {
		r0 = rf(Ctx, chatId, limit, offset, searchUsername)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.MemberPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int, int, string) error); ok {
		r1 = rf(Ctx, chatId, limit, offset, searchUsername)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IChatMemberRepository_GetMembersPreview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMembersPreview'
type IChatMemberRepository_GetMembersPreview_Call struct {
	*mock.Call
}

// GetMembersPreview is a helper method to define mock.On call
//   - Ctx context.Context
//   - chatId int64
//   - limit int
//   - offset int
//   - searchUsername string
func (_e *IChatMemberRepository_Expecter) GetMembersPreview(Ctx interface{}, chatId interface{}, limit interface{}, offset interface{}, searchUsername interface{}) *IChatMemberRepository_GetMembersPreview_Call {
	return &IChatMemberRepository_GetMembersPreview_Call{Call: _e.mock.On("GetMembersPreview", Ctx, chatId, limit, offset, searchUsername)}
}

func (_c *IChatMemberRepository_GetMembersPreview_Call) Run(run func(Ctx context.Context, chatId int64, limit int, offset int, searchUsername string)) *IChatMemberRepository_GetMembersPreview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int), args[3].(int), args[4].(string))
	})
	return _c
}

func (_c *IChatMemberRepository_GetMembersPreview_Call) Return(_a0 []dto.MemberPreview, _a1 error) *IChatMemberRepository_GetMembersPreview_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IChatMemberRepository_GetMembersPreview_Call) RunAndReturn(run func(context.Context, int64, int, int, string) ([]dto.MemberPreview, error)) *IChatMemberRepository_GetMembersPreview_Call {
	_c.Call.Return(run)
	return _c
}

// ManyToCreate provides a mock function with given fields: Ctx, objects
func (_m *IChatMemberRepository) ManyToCreate(Ctx context.Context, objects []domain.ChatMember) error {
	ret := _m.Called(Ctx, objects)

	if len(ret) == 0 {
		panic("no return value specified for ManyToCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.ChatMember) error); ok {
		r0 = rf(Ctx, objects)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IChatMemberRepository_ManyToCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManyToCreate'
type IChatMemberRepository_ManyToCreate_Call struct {
	*mock.Call
}

// ManyToCreate is a helper method to define mock.On call
//   - Ctx context.Context
//   - objects []domain.ChatMember
func (_e *IChatMemberRepository_Expecter) ManyToCreate(Ctx interface{}, objects interface{}) *IChatMemberRepository_ManyToCreate_Call {
	return &IChatMemberRepository_ManyToCreate_Call{Call: _e.mock.On("ManyToCreate", Ctx, objects)}
}

func (_c *IChatMemberRepository_ManyToCreate_Call) Run(run func(Ctx context.Context, objects []domain.ChatMember)) *IChatMemberRepository_ManyToCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]domain.ChatMember))
	})
	return _c
}

func (_c *IChatMemberRepository_ManyToCreate_Call) Return(_a0 error) *IChatMemberRepository_ManyToCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IChatMemberRepository_ManyToCreate_Call) RunAndReturn(run func(context.Context, []domain.ChatMember) error) *IChatMemberRepository_ManyToCreate_Call {
	_c.Call.Return(run)
	return _c
}

// SetNewRole provides a mock function with given fields: Ctx, chatId, userId, role
func (_m *IChatMemberRepository) SetNewRole(Ctx context.Context, chatId int64, userId int64, role byte) error {
	ret := _m.Called(Ctx, chatId, userId, role)

	if len(ret) == 0 {
		panic("no return value specified for SetNewRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, byte) error); ok {
		r0 = rf(Ctx, chatId, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IChatMemberRepository_SetNewRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNewRole'
type IChatMemberRepository_SetNewRole_Call struct {
	*mock.Call
}

// SetNewRole is a helper method to define mock.On call
//   - Ctx context.Context
//   - chatId int64
//   - userId int64
//   - role byte
func (_e *IChatMemberRepository_Expecter) SetNewRole(Ctx interface{}, chatId interface{}, userId interface{}, role interface{}) *IChatMemberRepository_SetNewRole_Call {
	return &IChatMemberRepository_SetNewRole_Call{Call: _e.mock.On("SetNewRole", Ctx, chatId, userId, role)}
}

func (_c *IChatMemberRepository_SetNewRole_Call) Run(run func(Ctx context.Context, chatId int64, userId int64, role byte)) *IChatMemberRepository_SetNewRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(byte))
	})
	return _c
}

func (_c *IChatMemberRepository_SetNewRole_Call) Return(_a0 error) *IChatMemberRepository_SetNewRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IChatMemberRepository_SetNewRole_Call) RunAndReturn(run func(context.Context, int64, int64, byte) error) *IChatMemberRepository_SetNewRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateById provides a mock function with given fields: Ctx, id, updateFields
func (_m *IChatMemberRepository) UpdateById(Ctx context.Context, id int64, updateFields map[string]interface{}) error {
	ret := _m.Called(Ctx, id, updateFields)

	if len(ret) == 0 {
		panic("no return value specified for UpdateById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, map[string]interface{}) error); ok {
		r0 = rf(Ctx, id, updateFields)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IChatMemberRepository_UpdateById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateById'
type IChatMemberRepository_UpdateById_Call struct {
	*mock.Call
}

// UpdateById is a helper method to define mock.On call
//   - Ctx context.Context
//   - id int64
//   - updateFields map[string]interface{}
func (_e *IChatMemberRepository_Expecter) UpdateById(Ctx interface{}, id interface{}, updateFields interface{}) *IChatMemberRepository_UpdateById_Call {
	return &IChatMemberRepository_UpdateById_Call{Call: _e.mock.On("UpdateById", Ctx, id, updateFields)}
}

func (_c *IChatMemberRepository_UpdateById_Call) Run(run func(Ctx context.Context, id int64, updateFields map[string]interface{})) *IChatMemberRepository_UpdateById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *IChatMemberRepository_UpdateById_Call) Return(_a0 error) *IChatMemberRepository_UpdateById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IChatMemberRepository_UpdateById_Call) RunAndReturn(run func(context.Context, int64, map[string]interface{}) error) *IChatMemberRepository_UpdateById_Call {
	_c.Call.Return(run)
	return _c
}

// NewIChatMemberRepository creates a new instance of IChatMemberRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIChatMemberRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IChatMemberRepository {
	mock := &IChatMemberRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
